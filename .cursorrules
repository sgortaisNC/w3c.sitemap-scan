# Cursor AI Rules for Sitemap W3C Validator SaaS

## Prompt answers
Be concise, always prefer a short and technical answer over an educational one, except if explaination is asked. 

## Project Context
Building a micro-SaaS application that scans website sitemaps and performs W3C validation on all URLs listed. Users purchase credits to scan their sites.

## Tech Stack
- Backend: Node.js 20+ with Express.js
- Database: PostgreSQL 16+ with Prisma ORM
- Frontend: Vue.js 3 with Vite
- Queue: BullMQ for async job processing
- Auth: JWT with bcrypt
- Validation: W3C Nu HTML Checker API
- Deployment: Docker-ready

## Code Style & Standards

### General
- Use ES6+ modern JavaScript syntax
- Prefer async/await over promises chains
- Use descriptive variable names (no single letters except loops)
- Add JSDoc comments for all functions
- Keep functions small (max 30 lines)
- Follow DRY principle

### Backend
- Use Express Router for modular route handling
- Implement middleware for auth, validation, error handling
- Always validate input with Joi or Zod
- Use try-catch blocks for all async operations
- Return consistent JSON responses: `{ success, data, error, message }`
- Log all errors with Winston or Pino
- Use environment variables for all configs (never hardcode)

### Database
- Use Prisma migrations for schema changes
- Always use transactions for multi-step operations
- Index frequently queried fields
- Use snake_case for table/column names
- Add timestamps (created_at, updated_at) to all tables

### Frontend
- Use Vue Composition API (not Options API)
- Create reusable components (<200 lines each)
- Use Pinia for state management
- Implement proper loading states and error handling
- Use TypeScript for type safety
- Follow atomic design principles

### Security
- Never log sensitive data (passwords, tokens)
- Sanitize all user inputs
- Use parameterized queries (prevent SQL injection)
- Implement rate limiting on all endpoints
- Set secure HTTP headers (helmet.js)
- Use HTTPS in production

### Testing
- Write unit tests for business logic
- Use Jest for backend testing
- Use Vitest for frontend testing
- Aim for >70% code coverage
- Test edge cases and error scenarios

## Development Workflow

### Daily 1-hour sessions
1. Review previous day's progress (5 min)
2. Focus on ONE small task (45 min)
3. Document progress and next steps (10 min)

### Git Commit Convention
- feat: New feature
- fix: Bug fix
- docs: Documentation changes
- refactor: Code refactoring
- test: Adding tests
- chore: Maintenance tasks

Example: `feat: add sitemap XML parser endpoint`

### Code Review Checklist
- [ ] Code follows style guide
- [ ] All functions have comments
- [ ] No console.logs in production code
- [ ] Error handling implemented
- [ ] Tests written and passing
- [ ] No hardcoded values
- [ ] Security best practices followed

## AI Assistant Guidelines

When helping with this project:
1. Provide complete, working code (no TODOs or placeholders)
2. Include error handling in all examples
3. Add inline comments explaining complex logic
4. Suggest modern, performant solutions
5. Warn about potential security issues
6. Recommend testing strategies
7. Keep code DRY and modular
8. Follow RESTful API conventions
9. Optimize database queries
10. Consider scalability in design decisions

## Project-Specific Rules

### Sitemap Processing
- Support XML sitemaps only (no index sitemaps in MVP)
- Limit to 10,000 URLs per sitemap in MVP
- Parse URLs using xml2js library
- Validate sitemap structure before processing

### W3C Validation
- Use official W3C Nu HTML Checker API: https://validator.w3.org/nu/
- Respect rate limits (max 1 request/second)
- Implement exponential backoff for retries
- Store only errors and warnings (not full HTML)
- Timeout requests after 30 seconds

### Credit System
- Deduct 1 credit per URL scanned
- Check credit balance before starting scan
- Use database transactions for credit deduction
- Refund credits if scan fails
- Prevent negative balances

### Queue Processing
- Use BullMQ with Redis for job queue
- Set job timeout to 5 minutes
- Retry failed jobs 3 times
- Store job results in database
- Send email notification on completion (future feature)

## Performance Optimization
- Cache sitemap parsing for 1 hour
- Use connection pooling for database
- Implement pagination for large result sets
- Compress API responses with gzip
- Use indexes on frequently queried fields

## File Naming Conventions
- Routes: `name.routes.js` (e.g., `scan.routes.js`)
- Controllers: `name.controller.js`
- Services: `name.service.js`
- Models: `Name.model.js` (PascalCase)
- Utils: `nameUtil.js`
- Tests: `name.test.js`

## Documentation Standards
- Update README.md with each major feature
- Document all API endpoints in api-endpoints.md
- Add setup instructions in docs/
- Include example .env file
- Maintain CHANGELOG.md

## Priorities
1. **Security first**: Never compromise on security
2. **Functionality**: Make it work correctly
3. **Performance**: Optimize for speed
4. **User Experience**: Clear errors and feedback
5. **Maintainability**: Clean, documented code
