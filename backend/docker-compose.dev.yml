version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: w3c_checker_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: w3c_checker_dev
      POSTGRES_USER: w3c_user
      POSTGRES_PASSWORD: w3c_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U w3c_user -d w3c_checker_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: w3c_checker_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API (development)
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: w3c_checker_api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://w3c_user:w3c_password@postgres:5432/w3c_checker_dev?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-key-minimum-32-characters-for-local-dev
      JWT_EXPIRES_IN: 7d
      W3C_VALIDATOR_URL: https://validator.w3.org/nu/
      MAX_SITEMAP_URLS: 1000
      SCAN_TIMEOUT_MS: 30000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
      LOG_LEVEL: debug
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # Database Admin (optional)
  adminer:
    image: adminer:4.8.1
    container_name: w3c_checker_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

  # Redis Admin (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: w3c_checker_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: w3c_checker_network
